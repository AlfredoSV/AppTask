// <auto-generated />
using System;
using AppTask.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppTask.Migrations.ApplicationDataDb
{
    [DbContext(typeof(ApplicationDataDbContext))]
    [Migration("20250507131142_InitTables")]
    partial class InitTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppTask.Data.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0a1e5e8-9271-4f57-8476-f30841c4d77e"),
                            Name = "Pending"
                        },
                        new
                        {
                            Id = new Guid("2d6b301f-7ec0-4373-b844-345ba3cb8672"),
                            Name = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("4f2c5a27-3fc7-4b23-b68b-1c134a8c6fe1"),
                            Name = "OnHold"
                        },
                        new
                        {
                            Id = new Guid("66d7d8d1-6c4e-4966-b934-f7c45714a87b"),
                            Name = "Completed"
                        },
                        new
                        {
                            Id = new Guid("1e705b3a-7c2c-4957-a5a6-5e0a69b0219d"),
                            Name = "Canceled"
                        },
                        new
                        {
                            Id = new Guid("a3f2c89b-9115-4b84-92e1-8b8f4c6a2c3f"),
                            Name = "Blocked"
                        });
                });

            modelBuilder.Entity("AppTask.Data.TaskS", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssingTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinishtAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InitAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AssingTo");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StatusId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("31951ab6-101a-427d-9d9f-a613ad50601f"),
                            AssingTo = new Guid("71153bdf-54b6-408d-80a7-61d8e3a69673"),
                            CreatedAt = new DateTime(2025, 5, 7, 7, 10, 55, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("71153bdf-54b6-408d-80a7-61d8e3a69673"),
                            Description = "N/A",
                            FinishtAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InitAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "First",
                            StatusId = new Guid("e0a1e5e8-9271-4f57-8476-f30841c4d77e")
                        });
                });

            modelBuilder.Entity("AppTask.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71153bdf-54b6-408d-80a7-61d8e3a69673"),
                            Name = "alfredosanchezverduzco@outlook.com"
                        });
                });

            modelBuilder.Entity("AppTask.Data.TaskS", b =>
                {
                    b.HasOne("AppTask.Data.User", "UserAssingned")
                        .WithMany()
                        .HasForeignKey("AssingTo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppTask.Data.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppTask.Data.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("UserAssingned");

                    b.Navigation("UserCreated");
                });
#pragma warning restore 612, 618
        }
    }
}
